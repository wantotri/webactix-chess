//! Moving Vectors for Chess Piece

use super::Level;

/// Moving Vectors Struct for all pieces expect pawn
#[derive(Debug)]
pub struct Movement {
    pub vectors: Vec<Vec<(i8, i8)>>,
}

impl Movement {
    pub fn new(level: Level) -> Self {
        let vectors = match level {
            Level::Rook => vec![
                vec![(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)],
                vec![(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)],
                vec![(-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0)],
                vec![(0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7)]
            ],
            Level::Knight => vec![
                vec![(2, 1)],
                vec![(2, -1)],
                vec![(1, 2)],
                vec![(1, -2)],
                vec![(-1, 2)],
                vec![(-1, -2)],
                vec![(-2, 1)],
                vec![(-2, -1)]
            ],
            Level::Bishop => vec![
                vec![(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)],
                vec![(1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7)],
                vec![(-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7)],
                vec![(-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7)]
            ],
            Level::Queen => vec![
                vec![(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)],
                vec![(0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7)],
                vec![(-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0)],
                vec![(0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7)],
                vec![(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7)],
                vec![(1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7)],
                vec![(-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7)],
                vec![(-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7)]
            ],
            Level::King => vec![
                vec![(1, 0)],
                vec![(0, 1)],
                vec![(-1, 0)],
                vec![(0, -1)],
                vec![(1, 1)],
                vec![(1, -1)],
                vec![(-1, 1)],
                vec![(-1, -1)]
            ],
            _ => vec![]
        };

        Self { vectors }
    }
}
